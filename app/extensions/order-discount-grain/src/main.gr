import File from "sys/file"
import Result from "result"
import Option from "option"
import String from "string"
import Number from "number"
import List from "list"
import Json from "./json"

// write a line to stderr
let log = (logStr: String) => {
    File.fdWrite(File.stderr, logStr ++ "\n")
}

// read all from stdin
let rec readInput = (input: String) => {
    let (partialInput, bytesRead) = Result.unwrap(File.fdRead(File.stdin, 1024))
    let mut result = String.concat(input, partialInput)
    if (bytesRead == 1024) {
        readInput(result)
    } else {
        result
    }    
}

// the json parsing used returns a DOM that needs to be searched
let jsonProperty = (name, json) => {
    match (json) {
        Json.JSONObject(list) => {
            let entry = List.find((entryTest) => {
                let (entryTestName, _) = entryTest
                entryTestName == name
            }, list)
            Option.map(entry => {
                let (_, entryJson) = entry
                entryJson
            }, entry)
        },
        _ => {
            fail("Unexpected input")
        }
    }
}

// A little custom operator magic from Grain's @ospencer to clean up JSON navigation.
let property = field => json => jsonProperty(field, json)
let (|>) = (option, transform) => Option.flatMap(transform, option)

// Represents the merchant configuration for the discount
record Configuration { discountPercentage: Number, qualifyingProductTotal: Number }

// Parse the discount configuration metafield, which is a string with more JSON
let getConfiguration = (json) => {
    let valueJson = json |> property("discountNode") |> property("metafield") |> property("value")

    let value = match(valueJson) {
        Some(valueJson) => match (valueJson) {
            Json.JSONString(string) => string,
            _ => "{}"
        },
        None => "{}"
    }

    let configurationJson = Result.toOption(Json.parse(value))
    let percentageJson = configurationJson |> property("discountPercentage")
    let qualifyingTotalJson = configurationJson |> property("qualifyingProductTotal")
    {
        discountPercentage: match (percentageJson) {
            Some(percentageJson) => match (percentageJson) {
                Json.JSONNumber(number) => number,
                _ => 0
            },
            None => 0
        },
        qualifyingProductTotal: match (qualifyingTotalJson) {
            Some(qualifyingTotalJson) => match (qualifyingTotalJson) {
                Json.JSONNumber(number) => number,
                _ => 0
            },
            None => 0
        }
    }

}

// helper function to determine if the customer is a VIP
let isVip = (json) => {   
    let valueJson = json |> property("cart") |> property("buyerIdentity") |> property("customer") |> property("metafield") |> property("value")
    match (valueJson) {
        Some(value) => match (value) {
            Json.JSONString(string) => string == "true",
            _ => false
        },
        None => false
    }
}

//helper function for totalling qualifying products
let getQualifyingTotal = (linesJsonArray) => {
    let qualifyingLines = List.filter((line => {
        let isQualifyingJson = Some(line) |> property("merchandise") |> property("product") |> property("isQualifying")
        match (isQualifyingJson) {
            Some(value) => match (value) {
                Json.JSONBoolean(boolean) => boolean,
                _ => false
            },
            None => false
        }
    }), linesJsonArray)
    List.reduce((accum, line) => {
        let lineTotalJson = Some(line) |> property("cost") |> property("totalAmount") |> property("amount")
        match (lineTotalJson) {
            Some(value) => match (value) {
                Json.JSONString(numberStr) => Result.unwrap(Number.parseFloat(numberStr)),
                _ => 0
            },
            None => 0
        }
    }, 0, qualifyingLines)
}

// helper function for totalling qualifying products
let cartQualifies = (json, configuration) => {
    let linesJson = json |> property("cart") |> property("lines")
    match (linesJson) {
        Some(value) => match (value) {
            Json.JSONArray(array) => {
                let qualifyingTotal = getQualifyingTotal(array)
                qualifyingTotal >= configuration.qualifyingProductTotal
            },
            _ => false
        },
        None => false
    }
}

// The discount business logic
let discountFunction = (json) => {
    let noDiscount = "{
        \"discounts\": [],
        \"discountApplicationStrategy\": \"FIRST\"
    }"

    // Parse the discount configuration metafield, which is a string with more JSON
    let configuration = getConfiguration(json);

    if (!isVip(json)) {
        // If there's no customer on the order yet or they're not a VIP, no discount
        noDiscount
    } else if (!cartQualifies(json, configuration)) {
        // Total all qualifying products. If there aren't enough, no discount
        noDiscount
    } else {
        // Create an order discount using the configured percentage
        "{
            \"discounts\": [
                {
                    \"value\": {
                        \"percentage\": {
                            \"value\":" ++ toString(configuration.discountPercentage) ++ "
                        }
                    },
                    \"targets\": [
                        {
                            \"orderSubtotal\": {
                                \"excludedVariantIds\": []
                            }
                        }
                    ],
                    \"message\": \"VIP Discount\"
                }
            ],
            \"discountApplicationStrategy\": \"FIRST\"
        }"
    }
}

// read the function input, calculate the discount, write the function output
let inputStr = readInput("")
let input = Result.toOption(Json.parse(inputStr))
let outputJson = discountFunction(input)
print(outputJson)
